{"version":3,"sources":["app/model/clock-display.ts","app/context/ServiceContext.ts","app/component/ChatRigthMessage.tsx","app/component/ChatLeftMessage.tsx","app/model/chat-message.ts","app/component/ChatMessageList.tsx","app/page/Chat.tsx","app/model/interface-type.ts","app/component/Input.tsx","app/component/Radio.tsx","app/component/Select.tsx","app/model/language.ts","app/context/ThemeContext.tsx","app/page/Settings.tsx","app/component/Header.tsx","app/component/Navigation.tsx","app/component/Footer.tsx","app/service/message-service.ts","app/model/setting.ts","app/model/user.ts","app/App.tsx","app/service/user-service.ts","app/service/setting-service.ts","serviceWorker.ts","index.tsx"],"names":["ClockDisplay","ServiceContext","createContext","ChatRigthMessage","date","content","className","ChatLeftMessage","userName","formatTime","dt","clockDisplay","TwentyFour","hours","minutes","suffix","initialChatMessages","userid","createdAt","ChatMessageList","messages","user","setting","messageList","map","msg","id","m","isMyMessage","key","Chat","context","useContext","useState","isLoading","setIsLoading","setUser","setMessages","setSetting","setMsg","addMessage","currentDate","Date","newMsg","getHours","getMinutes","useEffect","a","userService","me","settingService","get","settings","messageService","getAppData","keydownHandler","e","ctrlEnter","keyCode","ctrlKey","window","addEventListener","removeEventListener","onSubmit","preventDefault","placeholder","type","value","onChange","target","onClick","InterfaceType","Input","props","label","test-id","testId","readOnly","autoComplete","onChangeHandler","Radio","options","op","checked","name","Select","languageList","ThemeContext","React","ThemeProvider","children","state","startingTheme","Ligth","theme","setTheme","updateTheme","val","useTheme","Provider","Settings","languageOptions","l","code","svrContext","setUserName","interfaceType","setInterfaceType","setClockDisplay","sendMessage","setSendMessage","language","setLanguage","getDefault","defaultSetting","updateSettings","update","inferfaceType","getSettingData","onChangeUserName","onChangeInterfaceType","onChangeClockDisplay","onChangeSendMessage","onChangeLanguge","Header","Navigation","exact","activeClassName","to","Footer","messageServiceImp","repository","add","newMessages","userId","getItem","JSON","parse","setItem","stringify","currentUser","Layout","classNameValue","App","current","provider","localStorage","request","Promise","resolve","basename","process","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5e38ab2f.chunk.js","sourcesContent":["export enum ClockDisplay {\r\n    TwentyFour = \"24\",\r\n    Twelve = \"12\"\r\n}","import { createContext } from 'react';\r\nimport { MessageService, } from '../service/message-service';\r\nimport { SettingService, } from '../service/setting-service';\r\nimport { UserService } from '../service/user-service';\r\n\r\n\r\nexport interface ServiceContextProps {\r\n  messageService: MessageService\r\n  settingService: SettingService\r\n  userService: UserService\r\n}\r\n\r\nconst ServiceContext = createContext<Partial<ServiceContextProps>>({});\r\n\r\nexport { ServiceContext }\r\n","import React from 'react'\r\n\r\nexport interface ChatRigthMessageProps {\r\n    date: string\r\n    content: string\r\n}\r\n\r\nconst ChatRigthMessage = ({ date, content }: ChatRigthMessageProps) => {\r\n    return (<div className='right'>\r\n        <div className=\"user\">\r\n            <p>{date}</p>\r\n        </div>\r\n        <div className=\"content\">\r\n            <span> {content}</span>\r\n        </div>\r\n    </div >)\r\n}\r\n\r\n\r\nexport default ChatRigthMessage","import React from 'react'\r\n\r\nexport interface ChatLeftMessageProps {\r\n    userName: string\r\n    date: string\r\n    content: string\r\n}\r\n\r\nconst ChatLeftMessage = ({ userName, date, content }: ChatLeftMessageProps) => {\r\n    return (<div className='left'>\r\n        <div className=\"user\">\r\n            <p>{userName}, {date}</p>\r\n        </div>\r\n        <div className=\"content\">\r\n            <span> {content}</span>\r\n        </div>\r\n    </div>)\r\n}\r\n\r\n\r\nexport default ChatLeftMessage","import { User } from \"./user\";\r\nimport { ClockDisplay } from \"./clock-display\";\r\n\r\nexport interface ChatMessage {\r\n    id?: number //TODO\r\n    userid: string\r\n    userName?: string\r\n    content: string\r\n    // it should formatted by the server but for this exercise we format this value\r\n    createdAt: AppDateTime\r\n}\r\n\r\n\r\nexport interface AppDateTime {\r\n    year?: number,\r\n    monthIndex?: number,\r\n    day?: number,\r\n    hours: number,\r\n    minutes: number,\r\n    seconds?: number\r\n}\r\n\r\n\r\nexport const formatTime = (dt: AppDateTime, clockDisplay: string | ClockDisplay): string => {\r\n    if (clockDisplay == ClockDisplay.TwentyFour) {\r\n        return `${dt.hours}:${dt.minutes}`\r\n    }\r\n    else {\r\n        const suffix = (dt.hours >= 12) ? 'pm' : 'am';\r\n        const hours = (dt.hours > 12) ? dt.hours - 12 : dt.hours\r\n        return `${hours === 0 ? 12 : hours}:${dt.minutes} ${suffix}`\r\n    }\r\n}\r\n\r\nexport const isMyMessage = (user: User, m: ChatMessage): boolean => {\r\n    return user.id == m.userid\r\n}\r\n\r\nexport const initialChatMessages: ChatMessage[] = [\r\n    { userid: 'guest01', userName: 'guest01', content: \"asdasdad basadasdasdaada badadadada\", createdAt: { hours: 15, minutes: 59 } },\r\n    { userid: 'guest01', userName: 'guest01', content: \"bababaa\", createdAt: { hours: 19, minutes: 59 } },\r\n    { userid: 'rmateo', userName: 'rmateo', content: \"bababaa\", createdAt: { hours: 11, minutes: 59 } },\r\n    { userid: 'rmateo', userName: 'rmateo', content: \"bababaa\", createdAt: { hours: 11, minutes: 59 } },\r\n    { userid: 'rmateo', userName: 'rmateo', content: \"bababaa\", createdAt: { hours: 11, minutes: 59 } }\r\n]","import React from \"react\"\r\nimport ChatRigthMessage from \"./ChatRigthMessage\"\r\nimport ChatLeftMessage from \"./ChatLeftMessage\"\r\nimport { ChatMessage, isMyMessage, formatTime } from \"../model/chat-message\"\r\nimport { User } from \"../model/user\"\r\nimport { Setting } from \"../model/setting\"\r\n\r\ninterface MessageListProp {\r\n    messages: ChatMessage[],\r\n    user: User,\r\n    setting: Setting\r\n}\r\n\r\nconst ChatMessageList = ({ messages, user, setting }: MessageListProp) => {\r\n    const messageList = messages.map((msg, id) => {\r\n        if (isMyMessage(user!, msg)) {\r\n            return (\r\n                <ChatRigthMessage\r\n                    key={id}\r\n                    date={formatTime(msg.createdAt, setting!.clockDisplay!)}\r\n                    content={msg.content} />)\r\n        }\r\n        return (<ChatLeftMessage\r\n            key={id}\r\n            userName={msg.userName!}\r\n            date={formatTime(msg.createdAt, setting!.clockDisplay!)}\r\n            content={msg.content} />)\r\n    })\r\n\r\n    return <section className=\"messages\">\r\n        {messageList}\r\n    </section>\r\n}\r\n\r\n\r\nexport default ChatMessageList","import React, { useState, useEffect, useContext, } from 'react'\r\nimport { ChatMessage, } from '../model/chat-message'\r\nimport { Setting } from '../model/setting'\r\nimport { User } from '../model/user';\r\nimport { ServiceContext } from '../context/ServiceContext';\r\nimport ChatMessageList from '../component/ChatMessageList';\r\n\r\nexport default function Chat() {\r\n    const context = useContext(ServiceContext)\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [user, setUser] = useState<User>()\r\n    const [messages, setMessages] = useState([] as ChatMessage[])\r\n    const [setting, setSetting] = useState<Setting>();\r\n    const [msg, setMsg] = useState('')\r\n\r\n    const addMessage = () => {\r\n        if (msg) {\r\n            const currentDate = new Date()\r\n            const newMsg: ChatMessage = { userid: user!.id, userName: setting!.userName, content: msg, createdAt: { hours: currentDate.getHours(), minutes: currentDate.getMinutes() } }\r\n            setMessages([...messages, newMsg])\r\n            setMsg('')\r\n        }\r\n    }\r\n\r\n    const onChangeHandler = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        setMsg(e.target.value);\r\n    }\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        addMessage();\r\n        setMsg('');\r\n    }\r\n\r\n    useEffect(() => {\r\n        const getAppData = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                const user = await context.userService!.me()\r\n                const settings = await context.settingService!.get(user!.id)\r\n                const messages = await context.messageService!.get(user!.id)\r\n                setUser(user)\r\n                setSetting(settings)\r\n                setMessages(messages)\r\n            } catch (error) {\r\n                // TODO: handle errors\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n        };\r\n        getAppData();\r\n    }, [user])\r\n\r\n    useEffect(() => {\r\n        const keydownHandler = (e: KeyboardEvent) => {\r\n            if (setting!.ctrlEnter == 'on' && e.keyCode === 13 && e.ctrlKey) {\r\n                addMessage()\r\n            }\r\n        }\r\n        window.addEventListener('keydown', keydownHandler)\r\n        return () => {\r\n            window.removeEventListener('keydown', keydownHandler)\r\n        }\r\n    })\r\n\r\n    return (\r\n        <>{\r\n            !isLoading && <div className=\"chat\">\r\n                <ChatMessageList messages={messages} user={user!} setting={setting!}></ChatMessageList>\r\n                <form id=\"chat\" onSubmit={handleSubmit}>\r\n                    <input placeholder=\"Enter Message...\" type=\"text\" value={msg} onChange={onChangeHandler} ></input>\r\n                    <button className=\"button\" type=\"button\" onClick={addMessage} >\r\n                        <i className=\"fas fa-paper-plane fa-2x\"></i>\r\n                    </button>\r\n                </form>\r\n            </div>\r\n        }\r\n        </>\r\n    )\r\n}","export enum InterfaceType {\r\n    Ligth = \"ligth\",\r\n    Dark = \"dark\"\r\n}","import React from 'react'\r\nimport { TestProps } from './test-pros'\r\n\r\ninterface InputProps {\r\n    label: string\r\n    value?: string\r\n    readOnly?: boolean\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nconst Input = (props: InputProps & TestProps) => (\r\n    <label className=\"top\">{props.label}\r\n        <input type=\"text\" test-id={props.testId} readOnly={props.readOnly} autoComplete=\"off\" value={props.value} onChange={(e: React.ChangeEvent<HTMLInputElement>) => {\r\n            if (props.onChange)\r\n                props.onChange(e.target.value)\r\n        }} ></input>\r\n    </label>\r\n)\r\n\r\nexport default Input","import React from 'react'\r\nimport { TestProps } from './test-pros'\r\n\r\ninterface RadioProps {\r\n    name: string\r\n    label: string\r\n    value?: string | boolean\r\n    options: { value: string, label: string }[]\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nconst onChangeHandler = (props: RadioProps): ((event: React.ChangeEvent<HTMLInputElement>) => void) | undefined => {\r\n    return (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        if (props.onChange)\r\n            props.onChange(e.target.value)\r\n    }\r\n}\r\n\r\nconst Radio = (props: RadioProps & TestProps) => (\r\n    <>\r\n        <h2>{props.label}</h2>\r\n        {\r\n            props.options.map(op => (\r\n                <label className=\"sbs radio\" key={op.value}>\r\n                    <input\r\n                        test-id={props.testId}\r\n                        type=\"radio\"\r\n                        value={op.value}\r\n                        checked={props.value === op.value}\r\n                        name={props.name}\r\n                        onChange={onChangeHandler(props)} />\r\n                    {op.label}\r\n                </label>\r\n            ))\r\n        }\r\n    </>\r\n)\r\n\r\nexport default Radio\r\n\r\n\r\n","import React from 'react'\r\nimport { TestProps } from './test-pros'\r\n\r\ninterface SelectProps {\r\n    name?: string\r\n    label: string\r\n    value?: string\r\n    options: { value: string, label: string }[]\r\n    onChange?: (value: string) => void\r\n}\r\n\r\nconst onChangeHandler = (props: SelectProps): ((event: React.ChangeEvent<HTMLSelectElement>) => void) | undefined => {\r\n    return (e: React.ChangeEvent<HTMLSelectElement>) => {\r\n        if (props.onChange)\r\n            props.onChange(e.target.value)\r\n    }\r\n}\r\n\r\nconst options = (props: SelectProps): React.ReactNode => {\r\n    return props.options.map(op => (\r\n        <option key={op.value} value={op.value}>{op.label}</option>\r\n    ))\r\n}\r\n\r\n\r\nconst Select = (props: SelectProps & TestProps) => (\r\n    <label className=\"top\">\r\n        {props.label}\r\n        <select value={props.value}\r\n            test-id={props.testId}\r\n            onChange={onChangeHandler(props)} >\r\n            <option value=\"\"> Please Select &#9662;</option>\r\n            {\r\n                options(props)\r\n            }\r\n        </select>\r\n    </label>\r\n)\r\n\r\nexport default Select\r\n\r\n","\r\nexport interface Language {\r\n    code: string;\r\n    name: string;\r\n    nativeName: string;\r\n}\r\n\r\nexport const languageList: Language[] = [\r\n    { \"code\": \"ab\", \"name\": \"Abkhaz\", \"nativeName\": \"аҧсуа\" },\r\n    { \"code\": \"aa\", \"name\": \"Afar\", \"nativeName\": \"Afaraf\" },\r\n    { \"code\": \"af\", \"name\": \"Afrikaans\", \"nativeName\": \"Afrikaans\" },\r\n    { \"code\": \"ak\", \"name\": \"Akan\", \"nativeName\": \"Akan\" },\r\n    { \"code\": \"sq\", \"name\": \"Albanian\", \"nativeName\": \"Shqip\" },\r\n    { \"code\": \"am\", \"name\": \"Amharic\", \"nativeName\": \"አማርኛ\" },\r\n    { \"code\": \"ar\", \"name\": \"Arabic\", \"nativeName\": \"العربية\" },\r\n    { \"code\": \"an\", \"name\": \"Aragonese\", \"nativeName\": \"Aragonés\" },\r\n    { \"code\": \"hy\", \"name\": \"Armenian\", \"nativeName\": \"Հայերեն\" },\r\n    { \"code\": \"as\", \"name\": \"Assamese\", \"nativeName\": \"অসমীয়া\" },\r\n    { \"code\": \"av\", \"name\": \"Avaric\", \"nativeName\": \"авар мацӀ, магӀарул мацӀ\" },\r\n    { \"code\": \"ae\", \"name\": \"Avestan\", \"nativeName\": \"avesta\" },\r\n    { \"code\": \"ay\", \"name\": \"Aymara\", \"nativeName\": \"aymar aru\" },\r\n    { \"code\": \"az\", \"name\": \"Azerbaijani\", \"nativeName\": \"azərbaycan dili\" },\r\n    { \"code\": \"bm\", \"name\": \"Bambara\", \"nativeName\": \"bamanankan\" },\r\n    { \"code\": \"ba\", \"name\": \"Bashkir\", \"nativeName\": \"башҡорт теле\" },\r\n    { \"code\": \"eu\", \"name\": \"Basque\", \"nativeName\": \"euskara, euskera\" },\r\n    { \"code\": \"be\", \"name\": \"Belarusian\", \"nativeName\": \"Беларуская\" },\r\n    { \"code\": \"bn\", \"name\": \"Bengali\", \"nativeName\": \"বাংলা\" },\r\n    { \"code\": \"bh\", \"name\": \"Bihari\", \"nativeName\": \"भोजपुरी\" },\r\n    { \"code\": \"bi\", \"name\": \"Bislama\", \"nativeName\": \"Bislama\" },\r\n    { \"code\": \"bs\", \"name\": \"Bosnian\", \"nativeName\": \"bosanski jezik\" },\r\n    { \"code\": \"br\", \"name\": \"Breton\", \"nativeName\": \"brezhoneg\" },\r\n    { \"code\": \"bg\", \"name\": \"Bulgarian\", \"nativeName\": \"български език\" },\r\n    { \"code\": \"my\", \"name\": \"Burmese\", \"nativeName\": \"ဗမာစာ\" },\r\n    { \"code\": \"ca\", \"name\": \"Catalan; Valencian\", \"nativeName\": \"Català\" },\r\n    { \"code\": \"ch\", \"name\": \"Chamorro\", \"nativeName\": \"Chamoru\" },\r\n    { \"code\": \"ce\", \"name\": \"Chechen\", \"nativeName\": \"нохчийн мотт\" },\r\n    { \"code\": \"ny\", \"name\": \"Chichewa; Chewa; Nyanja\", \"nativeName\": \"chiCheŵa, chinyanja\" },\r\n    { \"code\": \"zh\", \"name\": \"Chinese\", \"nativeName\": \"中文 (Zhōngwén), 汉语, 漢語\" },\r\n    { \"code\": \"cv\", \"name\": \"Chuvash\", \"nativeName\": \"чӑваш чӗлхи\" },\r\n    { \"code\": \"kw\", \"name\": \"Cornish\", \"nativeName\": \"Kernewek\" },\r\n    { \"code\": \"co\", \"name\": \"Corsican\", \"nativeName\": \"corsu, lingua corsa\" },\r\n    { \"code\": \"cr\", \"name\": \"Cree\", \"nativeName\": \"ᓀᐦᐃᔭᐍᐏᐣ\" },\r\n    { \"code\": \"hr\", \"name\": \"Croatian\", \"nativeName\": \"hrvatski\" },\r\n    { \"code\": \"cs\", \"name\": \"Czech\", \"nativeName\": \"česky, čeština\" },\r\n    { \"code\": \"da\", \"name\": \"Danish\", \"nativeName\": \"dansk\" },\r\n    { \"code\": \"dv\", \"name\": \"Divehi; Dhivehi; Maldivian;\", \"nativeName\": \"ދިވެހި\" },\r\n    { \"code\": \"nl\", \"name\": \"Dutch\", \"nativeName\": \"Nederlands, Vlaams\" },\r\n    { \"code\": \"en\", \"name\": \"English\", \"nativeName\": \"English\" },\r\n    { \"code\": \"eo\", \"name\": \"Esperanto\", \"nativeName\": \"Esperanto\" },\r\n    { \"code\": \"et\", \"name\": \"Estonian\", \"nativeName\": \"eesti, eesti keel\" },\r\n    { \"code\": \"ee\", \"name\": \"Ewe\", \"nativeName\": \"Eʋegbe\" },\r\n    { \"code\": \"fo\", \"name\": \"Faroese\", \"nativeName\": \"føroyskt\" },\r\n    { \"code\": \"fj\", \"name\": \"Fijian\", \"nativeName\": \"vosa Vakaviti\" },\r\n    { \"code\": \"fi\", \"name\": \"Finnish\", \"nativeName\": \"suomi, suomen kieli\" },\r\n    { \"code\": \"fr\", \"name\": \"French\", \"nativeName\": \"français, langue française\" },\r\n    { \"code\": \"ff\", \"name\": \"Fula; Fulah; Pulaar; Pular\", \"nativeName\": \"Fulfulde, Pulaar, Pular\" },\r\n    { \"code\": \"gl\", \"name\": \"Galician\", \"nativeName\": \"Galego\" },\r\n    { \"code\": \"ka\", \"name\": \"Georgian\", \"nativeName\": \"ქართული\" },\r\n    { \"code\": \"de\", \"name\": \"German\", \"nativeName\": \"Deutsch\" },\r\n    { \"code\": \"el\", \"name\": \"Greek, Modern\", \"nativeName\": \"Ελληνικά\" },\r\n    { \"code\": \"gn\", \"name\": \"Guaraní\", \"nativeName\": \"Avañeẽ\" },\r\n    { \"code\": \"gu\", \"name\": \"Gujarati\", \"nativeName\": \"ગુજરાતી\" },\r\n    { \"code\": \"ht\", \"name\": \"Haitian; Haitian Creole\", \"nativeName\": \"Kreyòl ayisyen\" },\r\n    { \"code\": \"ha\", \"name\": \"Hausa\", \"nativeName\": \"Hausa, هَوُسَ\" },\r\n    { \"code\": \"he\", \"name\": \"Hebrew (modern)\", \"nativeName\": \"עברית\" },\r\n    { \"code\": \"hz\", \"name\": \"Herero\", \"nativeName\": \"Otjiherero\" },\r\n    { \"code\": \"hi\", \"name\": \"Hindi\", \"nativeName\": \"हिन्दी, हिंदी\" },\r\n    { \"code\": \"ho\", \"name\": \"Hiri Motu\", \"nativeName\": \"Hiri Motu\" },\r\n    { \"code\": \"hu\", \"name\": \"Hungarian\", \"nativeName\": \"Magyar\" },\r\n    { \"code\": \"ia\", \"name\": \"Interlingua\", \"nativeName\": \"Interlingua\" },\r\n    { \"code\": \"id\", \"name\": \"Indonesian\", \"nativeName\": \"Bahasa Indonesia\" },\r\n    { \"code\": \"ie\", \"name\": \"Interlingue\", \"nativeName\": \"Originally called Occidental; then Interlingue after WWII\" },\r\n    { \"code\": \"ga\", \"name\": \"Irish\", \"nativeName\": \"Gaeilge\" },\r\n    { \"code\": \"ig\", \"name\": \"Igbo\", \"nativeName\": \"Asụsụ Igbo\" },\r\n    { \"code\": \"ik\", \"name\": \"Inupiaq\", \"nativeName\": \"Iñupiaq, Iñupiatun\" },\r\n    { \"code\": \"io\", \"name\": \"Ido\", \"nativeName\": \"Ido\" },\r\n    { \"code\": \"is\", \"name\": \"Icelandic\", \"nativeName\": \"Íslenska\" },\r\n    { \"code\": \"it\", \"name\": \"Italian\", \"nativeName\": \"Italiano\" },\r\n    { \"code\": \"iu\", \"name\": \"Inuktitut\", \"nativeName\": \"ᐃᓄᒃᑎᑐᑦ\" },\r\n    { \"code\": \"ja\", \"name\": \"Japanese\", \"nativeName\": \"日本語 (にほんご／にっぽんご)\" },\r\n    { \"code\": \"jv\", \"name\": \"Javanese\", \"nativeName\": \"basa Jawa\" },\r\n    { \"code\": \"kl\", \"name\": \"Kalaallisut, Greenlandic\", \"nativeName\": \"kalaallisut, kalaallit oqaasii\" },\r\n    { \"code\": \"kn\", \"name\": \"Kannada\", \"nativeName\": \"ಕನ್ನಡ\" },\r\n    { \"code\": \"kr\", \"name\": \"Kanuri\", \"nativeName\": \"Kanuri\" },\r\n    { \"code\": \"ks\", \"name\": \"Kashmiri\", \"nativeName\": \"कश्मीरी, كشميري‎\" },\r\n    { \"code\": \"kk\", \"name\": \"Kazakh\", \"nativeName\": \"Қазақ тілі\" },\r\n    { \"code\": \"km\", \"name\": \"Khmer\", \"nativeName\": \"ភាសាខ្មែរ\" },\r\n    { \"code\": \"ki\", \"name\": \"Kikuyu, Gikuyu\", \"nativeName\": \"Gĩkũyũ\" },\r\n    { \"code\": \"rw\", \"name\": \"Kinyarwanda\", \"nativeName\": \"Ikinyarwanda\" },\r\n    { \"code\": \"ky\", \"name\": \"Kirghiz, Kyrgyz\", \"nativeName\": \"кыргыз тили\" },\r\n    { \"code\": \"kv\", \"name\": \"Komi\", \"nativeName\": \"коми кыв\" },\r\n    { \"code\": \"kg\", \"name\": \"Kongo\", \"nativeName\": \"KiKongo\" },\r\n    { \"code\": \"ko\", \"name\": \"Korean\", \"nativeName\": \"한국어 (韓國語), 조선말 (朝鮮語)\" },\r\n    { \"code\": \"ku\", \"name\": \"Kurdish\", \"nativeName\": \"Kurdî, كوردی‎\" },\r\n    { \"code\": \"kj\", \"name\": \"Kwanyama, Kuanyama\", \"nativeName\": \"Kuanyama\" },\r\n    { \"code\": \"la\", \"name\": \"Latin\", \"nativeName\": \"latine, lingua latina\" },\r\n    { \"code\": \"lb\", \"name\": \"Luxembourgish, Letzeburgesch\", \"nativeName\": \"Lëtzebuergesch\" },\r\n    { \"code\": \"lg\", \"name\": \"Luganda\", \"nativeName\": \"Luganda\" },\r\n    { \"code\": \"li\", \"name\": \"Limburgish, Limburgan, Limburger\", \"nativeName\": \"Limburgs\" },\r\n    { \"code\": \"ln\", \"name\": \"Lingala\", \"nativeName\": \"Lingála\" },\r\n    { \"code\": \"lo\", \"name\": \"Lao\", \"nativeName\": \"ພາສາລາວ\" },\r\n    { \"code\": \"lt\", \"name\": \"Lithuanian\", \"nativeName\": \"lietuvių kalba\" },\r\n    { \"code\": \"lu\", \"name\": \"Luba-Katanga\", \"nativeName\": \"\" },\r\n    { \"code\": \"lv\", \"name\": \"Latvian\", \"nativeName\": \"latviešu valoda\" },\r\n    { \"code\": \"gv\", \"name\": \"Manx\", \"nativeName\": \"Gaelg, Gailck\" },\r\n    { \"code\": \"mk\", \"name\": \"Macedonian\", \"nativeName\": \"македонски јазик\" },\r\n    { \"code\": \"mg\", \"name\": \"Malagasy\", \"nativeName\": \"Malagasy fiteny\" },\r\n    { \"code\": \"ms\", \"name\": \"Malay\", \"nativeName\": \"bahasa Melayu, بهاس ملايو‎\" },\r\n    { \"code\": \"ml\", \"name\": \"Malayalam\", \"nativeName\": \"മലയാളം\" },\r\n    { \"code\": \"mt\", \"name\": \"Maltese\", \"nativeName\": \"Malti\" },\r\n    { \"code\": \"mi\", \"name\": \"Māori\", \"nativeName\": \"te reo Māori\" },\r\n    { \"code\": \"mr\", \"name\": \"Marathi (Marāṭhī)\", \"nativeName\": \"मराठी\" },\r\n    { \"code\": \"mh\", \"name\": \"Marshallese\", \"nativeName\": \"Kajin M̧ajeļ\" },\r\n    { \"code\": \"mn\", \"name\": \"Mongolian\", \"nativeName\": \"монгол\" },\r\n    { \"code\": \"na\", \"name\": \"Nauru\", \"nativeName\": \"Ekakairũ Naoero\" },\r\n    { \"code\": \"nv\", \"name\": \"Navajo, Navaho\", \"nativeName\": \"Diné bizaad, Dinékʼehǰí\" },\r\n    { \"code\": \"nb\", \"name\": \"Norwegian Bokmål\", \"nativeName\": \"Norsk bokmål\" },\r\n    { \"code\": \"nd\", \"name\": \"North Ndebele\", \"nativeName\": \"isiNdebele\" },\r\n    { \"code\": \"ne\", \"name\": \"Nepali\", \"nativeName\": \"नेपाली\" },\r\n    { \"code\": \"ng\", \"name\": \"Ndonga\", \"nativeName\": \"Owambo\" },\r\n    { \"code\": \"nn\", \"name\": \"Norwegian Nynorsk\", \"nativeName\": \"Norsk nynorsk\" },\r\n    { \"code\": \"no\", \"name\": \"Norwegian\", \"nativeName\": \"Norsk\" },\r\n    { \"code\": \"ii\", \"name\": \"Nuosu\", \"nativeName\": \"ꆈꌠ꒿ Nuosuhxop\" },\r\n    { \"code\": \"nr\", \"name\": \"South Ndebele\", \"nativeName\": \"isiNdebele\" },\r\n    { \"code\": \"oc\", \"name\": \"Occitan\", \"nativeName\": \"Occitan\" },\r\n    { \"code\": \"oj\", \"name\": \"Ojibwe, Ojibwa\", \"nativeName\": \"ᐊᓂᔑᓈᐯᒧᐎᓐ\" },\r\n    { \"code\": \"cu\", \"name\": \"Old Church Slavonic, Church Slavic, Church Slavonic, Old Bulgarian, Old Slavonic\", \"nativeName\": \"ѩзыкъ словѣньскъ\" },\r\n    { \"code\": \"om\", \"name\": \"Oromo\", \"nativeName\": \"Afaan Oromoo\" },\r\n    { \"code\": \"or\", \"name\": \"Oriya\", \"nativeName\": \"ଓଡ଼ିଆ\" },\r\n    { \"code\": \"os\", \"name\": \"Ossetian, Ossetic\", \"nativeName\": \"ирон æвзаг\" },\r\n    { \"code\": \"pa\", \"name\": \"Panjabi, Punjabi\", \"nativeName\": \"ਪੰਜਾਬੀ, پنجابی‎\" },\r\n    { \"code\": \"pi\", \"name\": \"Pāli\", \"nativeName\": \"पाऴि\" },\r\n    { \"code\": \"fa\", \"name\": \"Persian\", \"nativeName\": \"فارسی\" },\r\n    { \"code\": \"pl\", \"name\": \"Polish\", \"nativeName\": \"polski\" },\r\n    { \"code\": \"ps\", \"name\": \"Pashto, Pushto\", \"nativeName\": \"پښتو\" },\r\n    { \"code\": \"pt\", \"name\": \"Portuguese\", \"nativeName\": \"Português\" },\r\n    { \"code\": \"qu\", \"name\": \"Quechua\", \"nativeName\": \"Runa Simi, Kichwa\" },\r\n    { \"code\": \"rm\", \"name\": \"Romansh\", \"nativeName\": \"rumantsch grischun\" },\r\n    { \"code\": \"rn\", \"name\": \"Kirundi\", \"nativeName\": \"kiRundi\" },\r\n    { \"code\": \"ro\", \"name\": \"Romanian, Moldavian, Moldovan\", \"nativeName\": \"română\" },\r\n    { \"code\": \"ru\", \"name\": \"Russian\", \"nativeName\": \"русский язык\" },\r\n    { \"code\": \"sa\", \"name\": \"Sanskrit (Saṁskṛta)\", \"nativeName\": \"संस्कृतम्\" },\r\n    { \"code\": \"sc\", \"name\": \"Sardinian\", \"nativeName\": \"sardu\" },\r\n    { \"code\": \"sd\", \"name\": \"Sindhi\", \"nativeName\": \"सिन्धी, سنڌي، سندھی‎\" },\r\n    { \"code\": \"se\", \"name\": \"Northern Sami\", \"nativeName\": \"Davvisámegiella\" },\r\n    { \"code\": \"sm\", \"name\": \"Samoan\", \"nativeName\": \"gagana faa Samoa\" },\r\n    { \"code\": \"sg\", \"name\": \"Sango\", \"nativeName\": \"yângâ tî sängö\" },\r\n    { \"code\": \"sr\", \"name\": \"Serbian\", \"nativeName\": \"српски језик\" },\r\n    { \"code\": \"gd\", \"name\": \"Scottish Gaelic; Gaelic\", \"nativeName\": \"Gàidhlig\" },\r\n    { \"code\": \"sn\", \"name\": \"Shona\", \"nativeName\": \"chiShona\" },\r\n    { \"code\": \"si\", \"name\": \"Sinhala, Sinhalese\", \"nativeName\": \"සිංහල\" },\r\n    { \"code\": \"sk\", \"name\": \"Slovak\", \"nativeName\": \"slovenčina\" },\r\n    { \"code\": \"sl\", \"name\": \"Slovene\", \"nativeName\": \"slovenščina\" },\r\n    { \"code\": \"so\", \"name\": \"Somali\", \"nativeName\": \"Soomaaliga, af Soomaali\" },\r\n    { \"code\": \"st\", \"name\": \"Southern Sotho\", \"nativeName\": \"Sesotho\" },\r\n    { \"code\": \"es\", \"name\": \"Spanish; Castilian\", \"nativeName\": \"español, castellano\" },\r\n    { \"code\": \"su\", \"name\": \"Sundanese\", \"nativeName\": \"Basa Sunda\" },\r\n    { \"code\": \"sw\", \"name\": \"Swahili\", \"nativeName\": \"Kiswahili\" },\r\n    { \"code\": \"ss\", \"name\": \"Swati\", \"nativeName\": \"SiSwati\" },\r\n    { \"code\": \"sv\", \"name\": \"Swedish\", \"nativeName\": \"svenska\" },\r\n    { \"code\": \"ta\", \"name\": \"Tamil\", \"nativeName\": \"தமிழ்\" },\r\n    { \"code\": \"te\", \"name\": \"Telugu\", \"nativeName\": \"తెలుగు\" },\r\n    { \"code\": \"tg\", \"name\": \"Tajik\", \"nativeName\": \"тоҷикӣ, toğikī, تاجیکی‎\" },\r\n    { \"code\": \"th\", \"name\": \"Thai\", \"nativeName\": \"ไทย\" },\r\n    { \"code\": \"ti\", \"name\": \"Tigrinya\", \"nativeName\": \"ትግርኛ\" },\r\n    { \"code\": \"bo\", \"name\": \"Tibetan Standard, Tibetan, Central\", \"nativeName\": \"བོད་ཡིག\" },\r\n    { \"code\": \"tk\", \"name\": \"Turkmen\", \"nativeName\": \"Türkmen, Түркмен\" },\r\n    { \"code\": \"tl\", \"name\": \"Tagalog\", \"nativeName\": \"Wikang Tagalog, ᜏᜒᜃᜅ᜔ ᜆᜄᜎᜓᜄ᜔\" },\r\n    { \"code\": \"tn\", \"name\": \"Tswana\", \"nativeName\": \"Setswana\" },\r\n    { \"code\": \"to\", \"name\": \"Tonga (Tonga Islands)\", \"nativeName\": \"faka Tonga\" },\r\n    { \"code\": \"tr\", \"name\": \"Turkish\", \"nativeName\": \"Türkçe\" },\r\n    { \"code\": \"ts\", \"name\": \"Tsonga\", \"nativeName\": \"Xitsonga\" },\r\n    { \"code\": \"tt\", \"name\": \"Tatar\", \"nativeName\": \"татарча, tatarça, تاتارچا‎\" },\r\n    { \"code\": \"tw\", \"name\": \"Twi\", \"nativeName\": \"Twi\" },\r\n    { \"code\": \"ty\", \"name\": \"Tahitian\", \"nativeName\": \"Reo Tahiti\" },\r\n    { \"code\": \"ug\", \"name\": \"Uighur, Uyghur\", \"nativeName\": \"Uyƣurqə, ئۇيغۇرچە‎\" },\r\n    { \"code\": \"uk\", \"name\": \"Ukrainian\", \"nativeName\": \"українська\" },\r\n    { \"code\": \"ur\", \"name\": \"Urdu\", \"nativeName\": \"اردو\" },\r\n    { \"code\": \"uz\", \"name\": \"Uzbek\", \"nativeName\": \"zbek, Ўзбек, أۇزبېك‎\" },\r\n    { \"code\": \"ve\", \"name\": \"Venda\", \"nativeName\": \"Tshivenḓa\" },\r\n    { \"code\": \"vi\", \"name\": \"Vietnamese\", \"nativeName\": \"Tiếng Việt\" },\r\n    { \"code\": \"vo\", \"name\": \"Volapük\", \"nativeName\": \"Volapük\" },\r\n    { \"code\": \"wa\", \"name\": \"Walloon\", \"nativeName\": \"Walon\" },\r\n    { \"code\": \"cy\", \"name\": \"Welsh\", \"nativeName\": \"Cymraeg\" },\r\n    { \"code\": \"wo\", \"name\": \"Wolof\", \"nativeName\": \"Wollof\" },\r\n    { \"code\": \"fy\", \"name\": \"Western Frisian\", \"nativeName\": \"Frysk\" },\r\n    { \"code\": \"xh\", \"name\": \"Xhosa\", \"nativeName\": \"isiXhosa\" },\r\n    { \"code\": \"yi\", \"name\": \"Yiddish\", \"nativeName\": \"ייִדיש\" },\r\n    { \"code\": \"yo\", \"name\": \"Yoruba\", \"nativeName\": \"Yorùbá\" },\r\n    { \"code\": \"za\", \"name\": \"Zhuang, Chuang\", \"nativeName\": \"Saɯ cueŋƅ, Saw cuengh\" }\r\n]","import React, { useState } from 'react';\r\nimport { InterfaceType } from '../model/interface-type';\r\n\r\nexport interface ThemeContextProps {\r\n    theme: InterfaceType\r\n    updateTheme: (val: InterfaceType) => void\r\n}\r\n\r\nexport const useTheme = (startingTheme: InterfaceType = InterfaceType.Ligth) => {\r\n    const [theme, setTheme] = useState<InterfaceType>(startingTheme);\r\n    return {\r\n        theme,\r\n        updateTheme(val: InterfaceType) {\r\n            setTheme(val)\r\n        }\r\n    };\r\n};\r\n\r\nexport const ThemeContext = React.createContext<Partial<ThemeContextProps>>({});\r\n\r\n\r\nexport interface ThemeProviderProps {\r\n    children: React.ReactNode\r\n    startingTheme: InterfaceType\r\n}\r\n\r\nexport const ThemeProvider = ({ children, startingTheme }: ThemeProviderProps) => {\r\n    const state = useTheme(startingTheme);\r\n    return (\r\n        <ThemeContext.Provider value={state}>{children}</ThemeContext.Provider>\r\n    );\r\n};","import React, { useState, useEffect, useContext } from 'react'\r\nimport Input from '../component/Input'\r\nimport Radio from '../component/Radio'\r\nimport Select from '../component/Select'\r\nimport { languageList } from '../model/language'\r\nimport { Setting } from '../model/setting'\r\nimport { ServiceContext } from '../context/ServiceContext'\r\nimport { User } from '../model/user'\r\nimport { ThemeContext } from '../context/ThemeContext'\r\nimport { InterfaceType } from '../model/interface-type'\r\nimport { ClockDisplay } from '../model/clock-display'\r\n\r\nexport default function Settings() {\r\n    const interfaceTypeOptions = [{ value: 'ligth', label: 'Ligth' }, { value: 'dark', label: 'Dark' }]\r\n    const clockDisplayOptions = [{ value: '12', label: '12 Hours' }, { value: '24', label: '24 Hours' }]\r\n    const messagesOptions = [{ value: 'on', label: 'On' }, { value: 'off', label: 'Off' }]\r\n    const languageOptions = languageList.map(l => ({ value: l.code, label: l.name }))\r\n\r\n    const svrContext = useContext(ServiceContext)\r\n    const { updateTheme } = useContext(ThemeContext)\r\n\r\n    const [isLoading, setIsLoading] = useState(false);\r\n    const [user, setUser] = useState<User>()\r\n    const [setting, setSetting] = useState<Setting>();\r\n\r\n    const [userName, setUserName] = useState('')\r\n    const [interfaceType, setInterfaceType] = useState('')\r\n    const [clockDisplay, setClockDisplay] = useState('')\r\n    const [sendMessage, setSendMessage] = useState('')\r\n    const [language, setLanguage] = useState('')\r\n\r\n    useEffect(() => {\r\n        const getSettingData = async () => {\r\n            setIsLoading(true);\r\n            try {\r\n                const user = await svrContext.userService?.me()\r\n                const settings = await svrContext.settingService!.get(user!.id)\r\n                setUser(user)\r\n                setSetting(settings)\r\n\r\n                setInterfaceType(settings.inferfaceType)\r\n                setClockDisplay(settings.clockDisplay)\r\n                setSendMessage(settings.ctrlEnter)\r\n                setLanguage(settings.language)\r\n                setUserName(settings.userName)\r\n\r\n            } catch (error) {\r\n                // TODO: handle errors\r\n            } finally {\r\n                setIsLoading(false);\r\n            }\r\n\r\n        };\r\n        getSettingData();\r\n    }, [])\r\n\r\n\r\n    async function handleSubmit(e: React.FormEvent<HTMLFormElement>) {\r\n        e.preventDefault();\r\n        const defaultSetting = await svrContext.settingService!.getDefault()\r\n        await updateSettings(defaultSetting)\r\n    }\r\n\r\n    async function updateSettings(setting: Setting) {\r\n        await svrContext.settingService!.update(setting)\r\n        const settings = await svrContext.settingService!.get(user!.id)\r\n        setSetting(settings)\r\n        setInterfaceType(settings.inferfaceType)\r\n        setClockDisplay(settings.clockDisplay)\r\n        setSendMessage(settings.ctrlEnter)\r\n        setLanguage(settings.language)\r\n        setUserName(settings.userName)\r\n        updateTheme!(settings.inferfaceType)\r\n    }\r\n\r\n    const onChangeUserName = async (val: string) => {\r\n        setUserName(val)\r\n        await updateSettings({ ...setting!, userName: val })\r\n    }\r\n    const onChangeInterfaceType = async (val: string) => {\r\n        setInterfaceType(val)\r\n        updateTheme!(val as InterfaceType)\r\n        await updateSettings({ ...setting!, inferfaceType: val as InterfaceType})\r\n\r\n    }\r\n    const onChangeClockDisplay = async (val: string) => {\r\n        setClockDisplay(val)\r\n        await updateSettings({ ...setting!, clockDisplay: val as ClockDisplay})\r\n    }\r\n\r\n    const onChangeSendMessage = async (val: string) => {\r\n        setSendMessage(val)\r\n        await updateSettings({ ...setting!, ctrlEnter: val })\r\n    }\r\n\r\n    const onChangeLanguge = async (val: string) => {\r\n        setLanguage(val)\r\n        await updateSettings({ ...setting!, language: val })\r\n    }\r\n    return (\r\n        <>\r\n            {!isLoading && <form id=\"settings\" onSubmit={handleSubmit} >\r\n                <Input label=\"User Name\" testId=\"username\" value={userName} onChange={onChangeUserName} ></Input>\r\n                <Radio label=\"Interface type\" testId=\"interfaceType\" name=\"interfaceType\" value={interfaceType} onChange={onChangeInterfaceType} options={interfaceTypeOptions}  ></Radio>\r\n                <Radio label=\"Clock display\" testId=\"clockDisplay\" name=\"clockDisplay\" value={clockDisplay} onChange={onChangeClockDisplay} options={clockDisplayOptions}  ></Radio>\r\n                <Radio label=\"Send Message on CRTL + ENTER\" testId=\"sendMessage\" name=\"sendMessage\" value={sendMessage} onChange={onChangeSendMessage} options={messagesOptions}  ></Radio>\r\n                <Select label=\"Language\" testId=\"language\" value={language} onChange={onChangeLanguge} options={languageOptions}></Select>\r\n                <input className=\"submitBtn\" type=\"submit\" value=\"Reset to Defaults\"></input>\r\n            </form>}\r\n        </>\r\n    )\r\n}\r\n\r\n","import React from 'react'\r\n\r\nconst Header = () => (\r\n    <header>\r\n        <h1>Docler Holding</h1>\r\n        <h2>Frontend Chat Application</h2>\r\n    </header>\r\n)\r\n\r\nexport default Header","import React from 'react'\r\nimport { Link, NavLink } from 'react-router-dom'\r\n\r\nconst Navigation = () => (\r\n    <nav >\r\n        <ul className=\"clearfix\">\r\n            <li><NavLink exact={true} activeClassName='active' to=\"/\">Chat</NavLink ></li>\r\n            <li><NavLink exact={true} activeClassName='active' to=\"/settings\">Settings</NavLink ></li>\r\n        </ul>\r\n    </nav>\r\n)\r\n\r\nexport default Navigation","import React from 'react'\r\n\r\nconst Footer = () => (\r\n    <footer>\r\n        <p>&copy;2020 Docler Holding </p>\r\n    </footer>\r\n)\r\n\r\nexport default Footer","import { ChatMessage } from \"../model/chat-message\";\r\nimport { LocalStorageRepository } from \"./local-storage-repository\";\r\n\r\nexport const messageServiceImp = \r\n(repository: LocalStorageRepository, initialChatMessages: ChatMessage[]): MessageService => {\r\n\r\n    const add = async (msg: ChatMessage): Promise<ChatMessage[]> => {\r\n        const messages = await get(msg.userid)\r\n        const newMessages = [...messages, msg]\r\n        update(newMessages)\r\n        return await get(msg.userid)\r\n    }\r\n\r\n    const get = async (userId: string): Promise<ChatMessage[]> => {\r\n        const value = repository.getItem('user-messages')\r\n        if (value) return JSON.parse(value) as ChatMessage[]\r\n        return [...initialChatMessages];\r\n    }\r\n\r\n    const update = (messages: ChatMessage[]) => {\r\n        repository.setItem('user-messages', JSON.stringify(messages))\r\n    }\r\n\r\n    return ({\r\n        add,\r\n        get\r\n    });\r\n}\r\n\r\nexport interface MessageService {\r\n    add(message: ChatMessage): Promise<ChatMessage[]>\r\n    get(userId: string): Promise<ChatMessage[]>\r\n}","import { ClockDisplay } from \"./clock-display\";\r\nimport { InterfaceType } from \"./interface-type\";\r\n\r\nexport interface Setting {\r\n    userName: string,\r\n    inferfaceType: InterfaceType;\r\n    clockDisplay: ClockDisplay;\r\n    ctrlEnter: string | 'on' | 'off';\r\n    language: string;\r\n}\r\n\r\nexport const defaultSetting: Setting = {\r\n    userName: 'default user name',\r\n    clockDisplay: ClockDisplay.TwentyFour,\r\n    inferfaceType: InterfaceType.Ligth,\r\n    ctrlEnter: 'on',\r\n    language: 'en'\r\n}","\r\nexport interface User {\r\n    id:string\r\n}\r\n\r\nexport const currentUser: User = {\r\n    id: 'rmateo',\r\n}","import React, { useContext, useEffect } from 'react';\nimport '../sass/style.scss';\nimport { BrowserRouter as Router, Route, Link } from 'react-router-dom'\nimport Chat from './page/Chat';\nimport Settings from './page/Settings';\nimport Header from './component/Header';\nimport Navigation from './component/Navigation';\nimport Footer from './component/Footer';\nimport { ServiceContext, ServiceContextProps } from './context/ServiceContext';\nimport { settingServiceImp } from './service/setting-service';\nimport { messageServiceImp } from './service/message-service';\nimport { userServiceImp } from './service/user-service';\nimport { ThemeProvider, ThemeContext } from './context/ThemeContext';\nimport { InterfaceType } from './model/interface-type';\nimport { initialChatMessages } from './model/chat-message';\nimport { defaultSetting } from './model/setting';\nimport { currentUser } from './model/user';\n\nconst Layout = ({ children }: { children: React.ReactNode }) => {\n  const { userService, settingService } = useContext(ServiceContext)\n  const { theme, updateTheme } = useContext(ThemeContext);\n  const classNameValue = theme === InterfaceType.Ligth ? '' : 'theme--dark';\n\n  useEffect(() => {\n    (async () => {\n      const user = await userService!.me()\n      const settings = await settingService!.get(user.id)\n      updateTheme!(settings.inferfaceType)\n    })()\n  }, [])\n\n  return (\n    <div id=\"wrapper\" className={classNameValue}>\n      {children}\n    </div>)\n};\n\nfunction App() {\n  const provider: Partial<ServiceContextProps> = {\n    messageService: messageServiceImp(localStorage, initialChatMessages),\n    settingService: settingServiceImp(localStorage, defaultSetting),\n    userService: userServiceImp(currentUser)\n  }\n\n  return (\n    <ServiceContext.Provider value={provider}>\n      <ThemeProvider startingTheme={InterfaceType.Ligth}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Layout>\n            <Header />\n            <Navigation></Navigation>\n            <main>\n              <Route path=\"/\" component={Chat} exact></Route>\n              <Route path=\"/settings\" component={Settings}></Route>\n            </main>\n            <Footer />\n          </Layout>\n        </Router>\n      </ThemeProvider>\n    </ServiceContext.Provider>\n  );\n}\n\nexport default App;\n","import { User } from \"../model/user\";\r\n\r\nexport const userServiceImp = (current: User): UserService => {\r\n    return ({\r\n        async me(): Promise<User> {\r\n            return Promise.resolve(current)\r\n        }\r\n    })\r\n}\r\n\r\nexport interface UserService {\r\n    me(): Promise<User>\r\n}\r\n","import { LocalStorageRepository } from \"./local-storage-repository\";\r\nimport { Setting } from \"../model/setting\";\r\n\r\nexport const settingServiceImp = (repository: LocalStorageRepository, defaultSetting: Setting): SettingService => {\r\n    return ({\r\n        async update(request: Setting): Promise<void> {\r\n            return repository.setItem('user-settings', JSON.stringify(request))\r\n        },\r\n\r\n        async get(userId: string): Promise<Setting> {\r\n            const value = repository.getItem('user-settings')\r\n            if (value) return JSON.parse(value) as Setting\r\n            return { ...defaultSetting }\r\n        },\r\n\r\n        async getDefault(): Promise<Setting> {\r\n            return { ...defaultSetting }\r\n        }\r\n    });\r\n}\r\n\r\nexport interface SettingService {\r\n    update(request: Setting): Promise<void>\r\n    get(userId: string): Promise<Setting>\r\n    getDefault(): Promise<Setting>\r\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './app/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}